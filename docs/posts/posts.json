[
  {
    "path": "posts/welcome/",
    "title": "Jurimetria",
    "description": "Blog voltado à comunidade jurídica interessada em jurimetria.",
    "author": [
      {
        "name": "José de Jesus Filho",
        "url": "https://github.com/jjesusfilho"
      }
    ],
    "date": "2022-04-29",
    "categories": [],
    "contents": "\n\n\n\n",
    "preview": {},
    "last_modified": "2022-04-29T11:23:40-03:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-04-29-como-baixar-dados-do-tjsp/",
    "title": "Como baixar dados do TJSP",
    "description": "Nesta primeira postagem do blog, falaremos sobre como baixar e estruturar dados do Tribunal de Justiça de São Paulo. Nas próximas, veremos como agregar valor a esses dados e como aplicar técnicas de machine learning  e métodos estatísticos para analisar e fazer predições.",
    "author": [
      {
        "name": "José de Jesus Filho",
        "url": "https://github.com/jjesusfilho"
      }
    ],
    "date": "2022-04-29",
    "categories": [],
    "contents": "\nO texto inaugural mostra como baixar dados processuais do Tribunal de Justiça de São Paulo (TJSP), bem como, estruturá-los e deixá-los prontos para análise.\nO único pré-requisito é ter noções básicas de programação em R.\nSe você não sabe R e quiser aprender para aplicar à jurimetria, eu mantenho um curso Jurimetria Aplicada.\nInicialmente, vamos instalar o pacote tjsp, o qual tem todas as ferramentas que você necessita para baixar e organizar os dados do TJSP. Para instalar o pacote tjsp, você deve ter o pacote remotes instalado.\nremotes::install_package(\"jjesusfilho/tjsp\")\nO pacote tjsp possui muitas funções para baixar e organizar os dados do TJSP. Ele segue uma sintaxe simples. A maioria das funções começa com tjsp_, seguido do verbo indicador da ação, e.g., baixar, seguido da sigla do repositório. Basicamente, o sistema esaj, responsável por disponibilizar os dados processuais do TJSP em meio eletrônico, usa quatro siglas:\ncjsg para consulta de julgados de segundo grau (busca jurisprudencia), nesta página.\ncjpg para consulta de julgados de primeiro grau, nesta página.\ncposg para consulta dos dados processuais de segundo grau (dados de capa) e movimentação processual, nesta página.\ncpopg para consulta dos dados processuais de primeiro grau (dados de capa ) mais movimentação processual, nesta página.\nDessa forma, para baixar um consulta jurisprudencial, você usa a função tjsp_baixar_cjsg(). Para baixar os dados de capa de um processo de primeiro grau, você usa a função tjsp_baixar_cpopg(). Dentro delas, você vai informar os mesmos dados que você informaria na consulta diretamente àquelas páginas.\nConsulta jurisprudencial\nA título de exemplo, vamos baixar alguns julgados de segundo grau. Se você consultar a ajuda da função tjsp_baixar_cjsg(), verá que ela tem quase os mesmos parâmetros que você usaria na página do TJSP:\nlibrary(tjsp)\n\n?tjsp_baixar_cjsg\ntjsp_baixar_cjsg(\n  livre = \"\",\n  aspas = FALSE,\n  classe = \"\",\n  assunto = \"\",\n  orgao_julgador = \"\",\n  inicio = \"\",\n  fim = \"\",\n  inicio_pb = \"\",\n  fim_pb = \"\",\n  tipo = \"A\",\n  n = NULL,\n  diretorio = \".\"\n)\nO primeiro argumento da função chama-se livre, o qual corresponde à “Pesquisa livre` na página referida. Há outros argumentos, como a especificação do assunto ou da classe processual. Hoje usaremos somente a busca livre e o argumento n, o qual indica o número de páginas. Além deles, indicaremos, no argumento diretorio, onde queremos baixar as consultas:\nVamos fazer um experimento com a palavra “feminicídio”. Vamos criar um diretório chamado feminicidio (sem acento) e, dentro dele, um outro chamado cjsg.\ndir.create(\"feminicidio\")\n\ndir.create(\"feminicidio/cjsg\")\nA consulta por feminicídio resultou em mais de 2500 julgados de segundo grau. Vamos baixar apenas as primerias 10 páginas da consulta. Veja abaixo como ficará a consulta.\ntjsp_baixar_cjsg(livre = \"feminicídio\",\n                 n  = 10,\n                 diretorio = \"feminicidio/cjsg\")\nForam baixados os htmls. Agora vamos ler esses htmls a fim de visualizá-los. O único argumento que você precisa informar é o diretorio onde foram salvos os htmls.\ncjsg <- tjsp_ler_cjsg(diretorio = \"feminicidio/cjsg\")\nO resultado é a criação de um dataframe como na imagem abaixo.\n\n\n\nAs colunas lidas são as seguintes:\n\nRows: 200\nColumns: 10\n$ classe          <chr> \"Habeas Corpus Criminal\", \"Apelação Criminal…\n$ assunto         <chr> \"Furto Qualificado\", \"Homicídio Qualificado\"…\n$ relator         <chr> \"Eduardo Abdalla\", \"Camargo Aranha Filho\", \"…\n$ comarca         <chr> \"Mairiporã\", \"Ibiúna\", \"Araçatuba\", \"São Vic…\n$ orgao_julgador  <chr> \"6ª Câmara de Direito Criminal\", \"16ª Câmara…\n$ data_julgamento <date> 2022-04-28, 2022-04-28, 2022-04-28, 2022-04…\n$ data_publicacao <date> 2022-04-28, 2022-04-28, 2022-04-28, 2022-04…\n$ processo        <chr> \"20665325320228260000\", \"0002365312019826023…\n$ ementa          <chr> \"HABEAS CORPUS. Pretendida revogação da pris…\n$ cdacordao       <chr> \"15617778\", \"15617979\", \"15618448\", \"1561631…\n\nConsulta processual\nO próximo passo é consultar os dados de capa desses processos. No entanto, para automatizar a coleta de dados processuais, é necessário identificar-se antes com CPF e senha. Se você está cadastrada no esaj, use a função abaixo. Ela irá abrir um caixa para você incluir seu cpf e senha.\ntjsp_autenticar()\nVamos criar um diretório chamado “cposg” dentro do diretório “feminicidio”.\ndir.create(\"feminicidio/cposg\")\nAgora vamos baixar os processos para a pasta criada. Iremos usar a coluna processo do dataframe cjsg. Para usá-la, basta colocar o cifrão entre o nome do dataframe e o nome da coluna.\ntjsp_baixar_cposg(cjsg$processo, diretorio = \"feminicidio/cposg\")\nA leitura dos htmls contendo as informações ocorre em quatro etapas. Iniciamos, nós lemos os dados de capa propriamente ditos, número do processo, magistrado, comarca, vara etc. Em seguida, lemos os dados das partes. Depois lemos a movimentação processual e, por fim, lemos o dispositivo do acórdão.\nPara isso, primeiramente listamos todos os arquivos, para então usar o caminho dos arquivos para “parsear” cada um dos grupos de dados mencionados acima. A função abaixo lista todos os htmls.\narquivos <- list.files(\"feminicidio/cposg\",full.names = TRUE)\nDados de capa\nAgora vamos usar esses arquivos para ler os dados de capa.\ndados <- tjsp_ler_dados_cposg(arquivos)\nAbaixo as colunas desses dados:\n\nRows: 230\nColumns: 15\n$ processo       <chr> \"00000417220218260408\", \"00000433520128260383…\n$ cd_processo    <chr> \"RI006OGX10000\", \"RI006K3E10000\", \"RI006KX4S0…\n$ area           <chr> \"Criminal\", \"Criminal\", \"Criminal\", \"Criminal…\n$ assunto        <chr> \"DIREITO PENAL-Crimes contra a vida-Feminicíd…\n$ classe         <chr> \" Recurso em Sentido Estrito\\n\", \" Recurso em…\n$ distribuicao   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ orgao_julgador <chr> \" 16ª Câmara de Direito Criminal\\n\", \" 2ª Câm…\n$ origem         <chr> \"Comarca de Ourinhos / Foro de Ourinhos / 2ª …\n$ outros_numeros <chr> \"\\n                            \\n            …\n$ relator        <chr> \"LEME GARCIA\", \"ANDRÉ CARVALHO E SILVA DE ALM…\n$ revisor        <chr> NA, NA, \"ALBERTO ANDERSON FILHO\", \"RACHID VAZ…\n$ secao          <chr> \" Direito Criminal\\n\", \" Direito Criminal\\n\",…\n$ ultima_carga   <chr> NA, \"\\n                            Origem: Se…\n$ valor_da_acao  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ volume_apenso  <chr> \"0 / 0\", \"3 / 1\", \"1 / 0\", \"1 / 0\", \"1 / 0\", …\n\nPartes\npartes <- tjsp_ler_partes(arquivos)\n\nRows: 554\nColumns: 4\n$ processo      <chr> \"00000417220218260408\", \"00000417220218260408\"…\n$ tipo_parte    <chr> \"Recorrente:\", \"Recorrido:\", \"Recorrente:\", \"R…\n$ parte         <chr> \"Ministério Público do Estado de São Paulo\", \"…\n$ representante <chr> NA, \"Advogada:&nbsp\\n\\t\\t  \\n\\t\\t\\t  \\n\\t\\t\\t …\n\nMovimentação processual\nO mesmo fazemos com a movimentação processual.\nmovimentacao <- tjsp_ler_movimentacao(arquivos)\nPara visualizar os dados:\n\nRows: 7,518\nColumns: 3\n$ processo     <chr> \"00000417220218260408\", \"00000417220218260408\",…\n$ data         <date> 2022-04-20, 2022-04-20, 2022-04-19, 2022-04-19…\n$ movimentacao <chr> \"Prazo\", \"Publicado em\\n            \\n        \\…\n\nDispositivos\nPor fim, lemos os dispositivos:\ndispositivos <- tjsp_ler_dispositivo(arquivos)\nE visualizamos:\n\nRows: 230\nColumns: 3\n$ processo    <chr> \"00000417220218260408\", \"00000433520128260383\", …\n$ data        <date> 2022-04-12, 2022-04-08, 2022-03-18, 2022-02-17,…\n$ dispositivo <chr> \"Negaram provimento ao recurso. V. U. Sustentou …\n\nNeste tutorial, vimos apenas como baixar e estruturar esses dados em dataframes. Nos próximos, veremos como agregar valor a esses dados. Por exemplo, podemos classificar as decisões se procedentes ou improcedentes. Podemos analisar o tempo do processo.\nHá muito mais pela frente. Aguarde os próximos tutoriais.\n\n\n\n",
    "preview": "posts/2022-04-29-como-baixar-dados-do-tjsp/feminicidio2.png",
    "last_modified": "2022-04-29T17:05:52-03:00",
    "input_file": "como-baixar-dados-do-tjsp.knit.md",
    "preview_width": 1286,
    "preview_height": 616
  }
]
